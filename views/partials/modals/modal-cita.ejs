<!-- MODAL CREAR/EDITAR CITA -->
<div
  id="modalCita"
  class="hidden fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center z-50"
>
  <div class="bg-white/90 rounded-2xl shadow-xl w-[90%] max-w-2xl p-6 relative border border-[#E0E6E6]">
    <h2 id="modalCitaTitulo" class="text-2xl font-bold text-[#3F4A4C] mb-4">Registrar nueva cita</h2>

    <form id="formCita" action="/citas" method="POST" class="space-y-4">
      <input type="hidden" id="citaId" name="id" />
      
      <!-- PACIENTE -->
      <div>
        <label class="text-sm font-medium text-[#3F4A4C]">Paciente</label>
        <select
          id="citaPacienteId"
          name="paciente_id"
          required
          class="w-full px-3 py-2 rounded-xl border border-[#E0E6E6] bg-white/70 outline-none focus:ring-2 focus:ring-[#A7D9B8]"
        >
          <option value="">Seleccione un paciente</option>
          <% if (pacientes && pacientes.length > 0) { %>
            <% pacientes.forEach(p => { %>
              <option value="<%= p.id %>"><%= p.nombre %> <%= p.apellido %> - <%= p.dni %></option>
            <% }) %>
          <% } %>
        </select>
      </div>

      <!-- MÉDICO -->
      <div>
        <label class="text-sm font-medium text-[#3F4A4C]">Médico</label>
        <select
          id="citaMedicoId"
          name="medico_id"
          required
          class="w-full px-3 py-2 rounded-xl border border-[#E0E6E6] bg-white/70 outline-none focus:ring-2 focus:ring-[#A7D9B8]"
        >
          <option value="">Seleccione un médico</option>
          <% if (medicos && medicos.length > 0) { %>
            <% medicos.forEach(m => { %>
              <option value="<%= m.id %>"><%= m.nombre %> <%= m.apellido %> - <%= m.especialidad %></option>
            <% }) %>
          <% } %>
        </select>
      </div>

      <!-- FECHA Y HORA -->
      <div class="grid grid-cols-2 gap-4">
        <div>
          <label class="text-sm font-medium text-[#3F4A4C]">Fecha</label>
          <input
            id="citaFecha"
            type="date"
            name="fecha"
            required
            class="w-full px-3 py-2 rounded-xl border border-[#E0E6E6] bg-white/70 outline-none focus:ring-2 focus:ring-[#A7D9B8]"
            min="<%= new Date().toISOString().split('T')[0] %>"
          />
        </div>

        <div>
          <label class="text-sm font-medium text-[#3F4A4C]">Hora</label>
          <select
            id="citaHora"
            name="hora"
            required
            class="w-full px-3 py-2 rounded-xl border border-[#E0E6E6] bg-white/70 outline-none focus:ring-2 focus:ring-[#A7D9B8]"
          >
            <option value="">Seleccione médico y fecha primero</option>
          </select>
        </div>
      </div>

      <!-- MOTIVO -->
      <div>
        <label class="text-sm font-medium text-[#3F4A4C]">Motivo</label>
        <textarea
          id="citaMotivo"
          name="motivo"
          rows="2"
          placeholder="Ejemplo: chequeo anual, control postoperatorio..."
          class="w-full px-3 py-2 rounded-xl border border-[#E0E6E6] bg-white/70 outline-none focus:ring-2 focus:ring-[#A7D9B8]"
        ></textarea>
      </div>

      <!-- ESTADO (solo al editar) -->
      <div id="citaEstadoContainer" class="hidden">
        <label class="text-sm font-medium text-[#3F4A4C]">Estado</label>
        <select
          id="citaEstado"
          name="estado"
          class="w-full px-3 py-2 rounded-xl border border-[#E0E6E6] bg-white/70 outline-none focus:ring-2 focus:ring-[#A7D9B8]"
        >
          <option value="programada">Programada</option>
          <option value="confirmada">Confirmada</option>
          <option value="cancelada">Cancelada</option>
          <option value="atendida">Atendida</option>
          <option value="no_show">No asistió</option>
        </select>
      </div>

      <!-- BOTONES -->
      <div class="flex justify-end gap-4 pt-4">
        <button
          type="button"
          id="btnCerrarModalCita"
          class="px-4 py-2 rounded-xl border border-[#E0E6E6] bg-white/70 hover:bg-[#E0E6E6]/70 text-[#3F4A4C]"
        >
          Cancelar
        </button>
        <button
          type="submit"
          class="px-4 py-2 rounded-xl bg-[#A7D9B8] hover:bg-[#3F4A4C] text-white font-semibold"
        >
          Guardar cita
        </button>
      </div>
    </form>
  </div>
</div>

<!-- SCRIPT DE CONTROL -->
<script>
  const modalCita = document.getElementById("modalCita");
  const btnAddCita = document.getElementById("btnAddCita");
  const btnCerrarModalCita = document.getElementById("btnCerrarModalCita");
  const formCita = document.getElementById("formCita");
  const tituloCita = document.getElementById("modalCitaTitulo");
  const estadoContainer = document.getElementById("citaEstadoContainer");
  const selectMedico = document.getElementById("citaMedicoId");
  const selectFecha = document.getElementById("citaFecha");
  const selectHora = document.getElementById("citaHora");

  // Función para cargar horarios disponibles
  async function cargarHorariosDisponibles() {
    const medicoId = selectMedico.value;
    const fecha = selectFecha.value;
    const citaId = document.getElementById("citaId").value; // Obtener ID de la cita si se está editando

    if (!medicoId || !fecha) {
      // Si no hay médico o fecha seleccionada, mostrar mensaje de selección
      selectHora.innerHTML = '<option value="">Seleccione médico y fecha primero</option>';
      ocultarMensajeHorarios();
      return;
    }

    // Mostrar indicador de carga
    selectHora.innerHTML = '<option value="">Cargando horarios disponibles...</option>';
    selectHora.disabled = true;

    try {
      // Construir URL con parámetros, incluyendo cita_id si se está editando
      let url = `/citas/horarios-disponibles?medico_id=${medicoId}&fecha=${fecha}`;
      if (citaId) {
        url += `&cita_id=${citaId}`;
      }
      
      const response = await fetch(url);
      const data = await response.json();

      if (response.ok) {
        // Obtener el horario actual si se está editando
        const horarioActual = document.getElementById("citaHora").value;
        
        // Solo mostrar horarios disponibles (NO los ocupados)
        // Si se está editando, auto-seleccionar el horario actual
        actualizarSelectHorarios(data.horariosDisponibles, citaId ? horarioActual : null);
        
        // Mostrar mensaje informativo
        mostrarMensajeHorarios(data.totalDisponibles, data.totalOcupados);
      } else {
        console.error('Error al cargar horarios:', data.error);
        selectHora.innerHTML = '<option value="">Error al cargar horarios</option>';
        ocultarMensajeHorarios();
      }
    } catch (error) {
      console.error('Error en la petición:', error);
      selectHora.innerHTML = '<option value="">Error de conexión</option>';
      ocultarMensajeHorarios();
    } finally {
      // Rehabilitar el select
      selectHora.disabled = false;
    }
  }

  // Función para actualizar el select de horarios
  function actualizarSelectHorarios(horariosDisponibles, horarioActual = null) {
    // Limpiar todas las opciones
    selectHora.innerHTML = '';
    
    if (horariosDisponibles.length === 0) {
      // No hay horarios disponibles
      selectHora.innerHTML = '<option value="" disabled>No hay horarios disponibles</option>';
      return;
    }

    // Agregar opción por defecto
    const defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.textContent = 'Seleccione hora';
    selectHora.appendChild(defaultOption);

    // Agregar SOLO los horarios disponibles (NO los ocupados)
    horariosDisponibles.forEach(horario => {
      const option = document.createElement('option');
      option.value = horario.value;
      option.textContent = horario.label;
      selectHora.appendChild(option);
    });

    // Si se está editando y hay un horario actual, auto-seleccionarlo
    if (horarioActual) {
      selectHora.value = horarioActual;
    }
  }


  // Función para mostrar mensaje informativo
  function mostrarMensajeHorarios(disponibles, ocupados) {
    // Remover mensaje anterior si existe
    ocultarMensajeHorarios();

    const mensajeDiv = document.createElement('div');
    mensajeDiv.id = 'mensajeHorarios';
    mensajeDiv.className = 'mt-2 p-2 rounded-lg text-sm';
    
    if (disponibles === 0) {
      mensajeDiv.className += ' bg-red-100 text-red-700 border border-red-200';
      mensajeDiv.innerHTML = '⚠️ No hay horarios disponibles para este médico en la fecha seleccionada';
    } else if (ocupados > 0) {
      mensajeDiv.className += ' bg-yellow-100 text-yellow-700 border border-yellow-200';
      mensajeDiv.innerHTML = `ℹ️ ${disponibles} horarios disponibles, ${ocupados} ocupados`;
    } else {
      mensajeDiv.className += ' bg-green-100 text-green-700 border border-green-200';
      mensajeDiv.innerHTML = '✅ Todos los horarios están disponibles';
    }

    // Insertar después del select de hora
    selectHora.parentNode.insertBefore(mensajeDiv, selectHora.nextSibling);
  }

  // Función para ocultar mensaje
  function ocultarMensajeHorarios() {
    const mensajeExistente = document.getElementById('mensajeHorarios');
    if (mensajeExistente) {
      mensajeExistente.remove();
    }
  }

  // Event listeners para cambios en médico y fecha
  selectMedico.addEventListener('change', cargarHorariosDisponibles);
  selectFecha.addEventListener('change', cargarHorariosDisponibles);

  // Abrir modal para crear
  if (btnAddCita) {
    btnAddCita.addEventListener("click", () => {
      formCita.action = "/citas";
      formCita.reset();
      tituloCita.textContent = "Registrar nueva cita";
      estadoContainer.classList.add("hidden");
      
      // Inicializar con mensaje de selección
      selectHora.innerHTML = '<option value="">Seleccione médico y fecha primero</option>';
      ocultarMensajeHorarios();
      
      modalCita.classList.remove("hidden");
    });
  }

  // Abrir modal para editar
  window.editarCita = (cita) => {
    formCita.action = `/citas/editar/${cita.id}`;
    tituloCita.textContent = "Editar cita";
    
    // Establecer todos los valores primero
    document.getElementById("citaId").value = cita.id;
    document.getElementById("citaPacienteId").value = cita.paciente_id;
    document.getElementById("citaMedicoId").value = cita.medico_id;
    document.getElementById("citaFecha").value = cita.fecha;
    document.getElementById("citaHora").value = cita.hora;
    document.getElementById("citaMotivo").value = cita.motivo || '';
    document.getElementById("citaEstado").value = cita.estado;
    
    estadoContainer.classList.remove("hidden");
    modalCita.classList.remove("hidden");
    
    // Cargar horarios disponibles después de establecer los valores
    // Esto asegura que el horario actual esté disponible para auto-selección
    setTimeout(() => {
      cargarHorariosDisponibles();
    }, 100);
  };

  if (btnCerrarModalCita) {
    btnCerrarModalCita.addEventListener("click", () => {
      modalCita.classList.add("hidden");
      ocultarMensajeHorarios();
    });
  }
</script>
